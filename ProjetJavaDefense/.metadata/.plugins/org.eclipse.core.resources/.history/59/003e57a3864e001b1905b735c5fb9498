/*Images from  Danc's Miraculously Flexible Game Prototyping Tiles 
 *Images telecharges du site Flaticon.com, license gratuite sous attribution
 */

package warcraftTD;


import java.util.List;
import java.util.Map;

import support.Carreau;
import support.GrilleCarreaux;

import java.util.LinkedList;

import java.util.ArrayList;
import java.util.Iterator;

public class World {
	// l'ensemble des monstres, pour gerer (notamment) l'affichage
	List<Monster> monsters = new ArrayList<Monster>();
	
	// Position par laquelle les monstres vont venir
	Position spawn;
	
	// Information sur la taille du plateau de jeu
	int width;
	int height;
	int nbSquareX;
	int nbSquareY;
	double squareWidth;
	double squareHeight;
	
	// Nombre de points de vie du joueur
	int life = 20;
	String vie=String.valueOf(life);
	
	// Quantite d'or du depart
	int gold=100;
	String or=String.valueOf(gold);
	
	
	// Commande sur laquelle le joueur appuie (sur le clavier)
	char key;
	
	// Condition pour terminer la partie
	boolean end = false;
	
	
	//Definit le decors du plateau de jeu.
	GrilleCarreaux grille;
	
	
	//Map (10x15) du jeu ou les 0 sont des herbes et 1 le chemin des monstres 
	
	int [][] map = {
			{0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 },
			{0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 },
			{0 ,1 ,0 ,0 ,1 ,1 ,1 ,1 ,1 ,0 ,1 ,1 ,1 ,1 ,0 },
			{0 ,1 ,0 ,0 ,1 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,1 ,0 },
			{0 ,1 ,0 ,0 ,1 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,1 ,0 },
			{0 ,1 ,1 ,1 ,1 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,1 ,0 },
			{0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,1 ,0 },
			{0 ,0 ,0 ,1 ,1 ,1 ,1 ,1 ,1 ,0 ,0 ,0 ,0 ,1 ,0 },
			{0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 },
			{0 ,0 ,0 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,0 },
			
	};
	
	
	/**
	 * Initialisation du monde en fonction de la largeur, la hauteur et le nombre de cases donnees
	 * @param width
	 * @param height
	 * @param nbSquareX
	 * @param nbSquareY
	 * @param startSquareX
	 * @param startSquareY
	 */
	public World(int width, int height, int nbSquareX, int nbSquareY, int startSquareX, int startSquareY) {
		this.width = width;
		this.height = height;
		this.nbSquareX = nbSquareX;
		this.nbSquareY = nbSquareY;
		squareWidth = (double) 1 / nbSquareX;
		squareHeight = (double) 1 / nbSquareY;
		spawn = new Position(startSquareX * squareWidth + squareWidth / 2, startSquareY * squareHeight + squareHeight / 2);
		
		grille = new GrilleCarreaux(map); //On attribue les valeurs du map a la grid des Carreaux
		
		StdDraw.setCanvasSize(width, height);
		StdDraw.enableDoubleBuffering();

		
	}
	
	
	

//	public void drawBackground() {	
//		 for (int i = 0; i < nbSquareX; i++)
//			 for (int j = 0; j < nbSquareY; j++) {
//				
//				 StdDraw.picture(i * squareWidth + squareWidth / 2, j * squareHeight + squareHeight / 2, "images/grass2.png", squareWidth, squareHeight);
//				 
//			 }
//	 }

//	public void drawBackground(int [][] newMap) {
//
//		for(int i=0; i < nbSquareX; i++) {
//			for(int j = 0; j < nbSquareY; j++) {
//				if(newMap[j][i] == 0)
//					StdDraw.picture(i * squareWidth + squareWidth / 2, 1.0 - (j * squareHeight + squareHeight / 2), "images/grass6.png", squareWidth, squareHeight);
//				else
//					StdDraw.picture(i * squareWidth + squareWidth / 2, 1.0-(j * squareHeight + squareHeight / 2), "images/dirt1.png", squareWidth, squareHeight);
//					
//			}
//		}
//		
//	}
	
	 
	 /**
	  * Initialise le chemin sur la position du point de depart des monstres. Cette fonction permet d'afficher une route qui sera differente du decors.
	  */
	 public void drawPath() {
		 Position p = new Position(spawn);
		 StdDraw.setPenColor(StdDraw.YELLOW);

		 StdDraw.picture(p.x,p.y, "images/portal.png", squareWidth, squareHeight);
			 
		 }

	 
	 /**
	  * Affiche certaines informations sur l'ecran telles que les points de vie du joueur ou son or
	  */
	 public void drawInfos() {
		 StdDraw.setPenColor(StdDraw.BLACK);
		 StdDraw.picture(0.93, 0.95, "images/heart.png",squareWidth/3,squareHeight/3);
		 StdDraw.text(0.96, 0.95, vie);
		 StdDraw.picture(0.93, 0.90, "images/coin.png",squareWidth/2.2,squareHeight/2.2);
		 StdDraw.text(0.96, 0.90, or);
	 }
	 
	 /**
	  * Fonction qui recupere le positionnement de la souris et permet d'afficher une image de tour en temps reel
	  *	lorsque le joueur appuie sur une des touches permettant la construction d'une tour.
	  */
	 public void drawMouse() {
		double normalizedX = (int)(StdDraw.mouseX() / squareWidth) * squareWidth + squareWidth / 2;
		double normalizedY = (int)(StdDraw.mouseY() / squareHeight) * squareHeight + squareHeight / 2;
		String image = null;
		switch (key) {
		case 'a' : 
			 // TODO Ajouter une image pour reprÃ©senter une tour d'archers
			StdDraw.picture(normalizedX,normalizedY, "images/archer.png", squareWidth, squareHeight);
			 
			 break;
		case 'b' :
			// TODO Ajouter une image pour reprÃ©senter une tour Ã  canon
			StdDraw.picture(normalizedX,normalizedY, "images/bomb.png", squareWidth, squareHeight);
			 break;
		}
		 if (image != null)
			 StdDraw.picture(normalizedX, normalizedY, image, squareWidth, squareHeight);
	 }
		 
	 /**
	  * Pour chaque monstre de la liste de monstres de la vague, utilise la fonction update() qui appelle les fonctions run() et draw() de Monster.
	  * Modifie la position du monstre au cours du temps Ã  l'aide du paramÃ¨tre nextP.
	  */
	 public void updateMonsters() {
	 
		Iterator<Monster> i = monsters.iterator();
		Monster m;
		while (i.hasNext()) {
			 m = i.next();
			 m.update();
			 if(m.p.y < 0) {
				 m.p.y = 1;
			 }
		 }
	 }
	 
	 /**
	  * Met Ã  jour toutes les informations du plateau de jeu ainsi que les dÃ©placements des monstres et les attaques des tours.
	  * @return les points de vie restants du joueur
	  */
	 public int update() {
		//drawBackground(map);
		grille.draw();
		 drawPath();
		drawInfos();
		updateMonsters();
		drawMouse();
		return life;
	 }
	 
	/**
	 * RÃ©cupÃ¨re la touche appuyÃ©e par l'utilisateur et affiche les informations pour la touche sÃ©lÃ©ctionnÃ©e
	 * @param key la touche utilisÃ©e par le joueur
	 */
	public void keyPress(char key) {
		key = Character.toLowerCase(key);
		this.key = key;
		switch (key) {
		case 'a':
			System.out.println("Arrow Tower selected (50g).");
			break;
		case 'b':
			System.out.println("Bomb Tower selected (60g).");
			break;
		case 'e':
			System.out.println("Evolution selected (40g).");
			break;
		case 's':
			System.out.println("Starting game!");
		case 'q':
			System.out.println("Exiting.");
		}
	}
	
	/**
	 * VÃ©rifie lorsque l'utilisateur clique sur sa souris qu'il peut: 
	 * 		- Ajouter une tour Ã  la position indiquÃ©e par la souris.
	 * 		- AmÃ©liorer une tour existante.
	 * Puis l'ajouter Ã  la liste des tours
	 * @param x
	 * @param y
	 */
	public void mouseClick(double x, double y) {
		double normalizedX = (int)(x / squareWidth) * squareWidth + squareWidth / 2;
		double normalizedY = (int)(y / squareHeight) * squareHeight + squareHeight / 2;
		Position p = new Position(normalizedX, normalizedY);
		switch (key) {
		case 'a':
			System.out.println("il faut ajouter une tour d'archers si l'utilisateur a  de l'or !!");
			StdDraw.picture(normalizedX,normalizedY, "images/archer.png", squareWidth, squareHeight);
			break;
		case 'b':
			System.out.println("Ici il faut ajouter une tour de bombes");
			break;
		case 'e':
			System.out.println("Ici il est possible de faire Ã©voluÃ© une des tours");
			break;
		}
	}
	
	/**
	 * Comme son nom l'indique, cette fonction permet d'afficher dans le terminal les diffÃ©rentes possibilitÃ©s 
	 * offertes au joueur pour intÃ©ragir avec le clavier
	 */
	public void printCommands() {
		System.out.println("Press A to select Arrow Tower (cost 50g).");
		System.out.println("Press B to select Cannon Tower (cost 60g).");
		System.out.println("Press E to update a tower (cost 40g).");
		System.out.println("Click on the grass to build it.");
		System.out.println("Press S to start.");
	}
	
	/**
	 * Recupere la touche entree au clavier ainsi que la position de la souris et met a  jour le plateau en fonction de ces interractions
	 */
	public void run() {
		printCommands();
		while(!end) {
			
			StdDraw.clear();
			if (StdDraw.hasNextKeyTyped()) {
				keyPress(StdDraw.nextKeyTyped());
			}
			
			if (StdDraw.isMousePressed()) {
				mouseClick(StdDraw.mouseX(), StdDraw.mouseY());
				StdDraw.pause(50);
			}
			
			update();
			StdDraw.show();
			StdDraw.pause(20);			
		}
	}
}
